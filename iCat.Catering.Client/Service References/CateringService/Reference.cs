//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace iCat.Catering.Client.CateringService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityTypeCode", Namespace="http://schemas.datacontract.org/2004/07/iCat.Catering.Model")]
    [System.SerializableAttribute()]
    public partial class EntityTypeCode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string c_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string writeIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string writeTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PType {
            get {
                return this.PTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PTypeField, value) != true)) {
                    this.PTypeField = value;
                    this.RaisePropertyChanged("PType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string c_ID {
            get {
                return this.c_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.c_IDField, value) != true)) {
                    this.c_IDField = value;
                    this.RaisePropertyChanged("c_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string writeIP {
            get {
                return this.writeIPField;
            }
            set {
                if ((object.ReferenceEquals(this.writeIPField, value) != true)) {
                    this.writeIPField = value;
                    this.RaisePropertyChanged("writeIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string writeTime {
            get {
                return this.writeTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.writeTimeField, value) != true)) {
                    this.writeTimeField = value;
                    this.RaisePropertyChanged("writeTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CateringService.ITypeCode", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ITypeCode {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITypeCode/AddTypeCode", ReplyAction="http://tempuri.org/ITypeCode/AddTypeCodeResponse")]
        string AddTypeCode(iCat.Catering.Client.CateringService.EntityTypeCode typeCode, string logonUser, string logonUserIp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITypeCodeChannel : iCat.Catering.Client.CateringService.ITypeCode, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TypeCodeClient : System.ServiceModel.ClientBase<iCat.Catering.Client.CateringService.ITypeCode>, iCat.Catering.Client.CateringService.ITypeCode {
        
        public TypeCodeClient() {
        }
        
        public TypeCodeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TypeCodeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TypeCodeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TypeCodeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddTypeCode(iCat.Catering.Client.CateringService.EntityTypeCode typeCode, string logonUser, string logonUserIp) {
            return base.Channel.AddTypeCode(typeCode, logonUser, logonUserIp);
        }
    }
}
